/****************************************************************************
** Meta object code from reading C++ file 'tests.cpp'
**
** Created by: The Qt Meta Object Compiler version 68 (Qt 6.5.3)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qmetatype.h>

#if __has_include(<QtCore/qtmochelpers.h>)
#include <QtCore/qtmochelpers.h>
#else
QT_BEGIN_MOC_NAMESPACE
#endif


#include <memory>

#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tests.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 68
#error "This file was generated using the moc from 6.5.3. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

#ifndef Q_CONSTINIT
#define Q_CONSTINIT
#endif

QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
QT_WARNING_DISABLE_GCC("-Wuseless-cast")
namespace {

#ifdef QT_MOC_HAS_STRINGDATA
struct qt_meta_stringdata_CLASSTestYourAppENDCLASS_t {};
static constexpr auto qt_meta_stringdata_CLASSTestYourAppENDCLASS = QtMocHelpers::stringData(
    "TestYourApp",
    "init",
    "",
    "cleanup",
    "TestPushBack",
    "TestPopBack",
    "TestClear",
    "TestDays",
    "TestMonths",
    "TestEdit",
    "TestDec",
    "TestInc",
    "TestBegin",
    "TestEnd",
    "TestInsert",
    "TestErase",
    "TestIteratorInvalidation"
);
#else  // !QT_MOC_HAS_STRING_DATA
struct qt_meta_stringdata_CLASSTestYourAppENDCLASS_t {
    uint offsetsAndSizes[34];
    char stringdata0[12];
    char stringdata1[5];
    char stringdata2[1];
    char stringdata3[8];
    char stringdata4[13];
    char stringdata5[12];
    char stringdata6[10];
    char stringdata7[9];
    char stringdata8[11];
    char stringdata9[9];
    char stringdata10[8];
    char stringdata11[8];
    char stringdata12[10];
    char stringdata13[8];
    char stringdata14[11];
    char stringdata15[10];
    char stringdata16[25];
};
#define QT_MOC_LITERAL(ofs, len) \
    uint(sizeof(qt_meta_stringdata_CLASSTestYourAppENDCLASS_t::offsetsAndSizes) + ofs), len 
Q_CONSTINIT static const qt_meta_stringdata_CLASSTestYourAppENDCLASS_t qt_meta_stringdata_CLASSTestYourAppENDCLASS = {
    {
        QT_MOC_LITERAL(0, 11),  // "TestYourApp"
        QT_MOC_LITERAL(12, 4),  // "init"
        QT_MOC_LITERAL(17, 0),  // ""
        QT_MOC_LITERAL(18, 7),  // "cleanup"
        QT_MOC_LITERAL(26, 12),  // "TestPushBack"
        QT_MOC_LITERAL(39, 11),  // "TestPopBack"
        QT_MOC_LITERAL(51, 9),  // "TestClear"
        QT_MOC_LITERAL(61, 8),  // "TestDays"
        QT_MOC_LITERAL(70, 10),  // "TestMonths"
        QT_MOC_LITERAL(81, 8),  // "TestEdit"
        QT_MOC_LITERAL(90, 7),  // "TestDec"
        QT_MOC_LITERAL(98, 7),  // "TestInc"
        QT_MOC_LITERAL(106, 9),  // "TestBegin"
        QT_MOC_LITERAL(116, 7),  // "TestEnd"
        QT_MOC_LITERAL(124, 10),  // "TestInsert"
        QT_MOC_LITERAL(135, 9),  // "TestErase"
        QT_MOC_LITERAL(145, 24)   // "TestIteratorInvalidation"
    },
    "TestYourApp",
    "init",
    "",
    "cleanup",
    "TestPushBack",
    "TestPopBack",
    "TestClear",
    "TestDays",
    "TestMonths",
    "TestEdit",
    "TestDec",
    "TestInc",
    "TestBegin",
    "TestEnd",
    "TestInsert",
    "TestErase",
    "TestIteratorInvalidation"
};
#undef QT_MOC_LITERAL
#endif // !QT_MOC_HAS_STRING_DATA
} // unnamed namespace

Q_CONSTINIT static const uint qt_meta_data_CLASSTestYourAppENDCLASS[] = {

 // content:
      11,       // revision
       0,       // classname
       0,    0, // classinfo
      15,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags, initial metatype offsets
       1,    0,  104,    2, 0x08,    1 /* Private */,
       3,    0,  105,    2, 0x08,    2 /* Private */,
       4,    0,  106,    2, 0x08,    3 /* Private */,
       5,    0,  107,    2, 0x08,    4 /* Private */,
       6,    0,  108,    2, 0x08,    5 /* Private */,
       7,    0,  109,    2, 0x08,    6 /* Private */,
       8,    0,  110,    2, 0x08,    7 /* Private */,
       9,    0,  111,    2, 0x08,    8 /* Private */,
      10,    0,  112,    2, 0x08,    9 /* Private */,
      11,    0,  113,    2, 0x08,   10 /* Private */,
      12,    0,  114,    2, 0x08,   11 /* Private */,
      13,    0,  115,    2, 0x08,   12 /* Private */,
      14,    0,  116,    2, 0x08,   13 /* Private */,
      15,    0,  117,    2, 0x08,   14 /* Private */,
      16,    0,  118,    2, 0x08,   15 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

Q_CONSTINIT const QMetaObject TestYourApp::staticMetaObject = { {
    QMetaObject::SuperData::link<QObject::staticMetaObject>(),
    qt_meta_stringdata_CLASSTestYourAppENDCLASS.offsetsAndSizes,
    qt_meta_data_CLASSTestYourAppENDCLASS,
    qt_static_metacall,
    nullptr,
    qt_incomplete_metaTypeArray<qt_meta_stringdata_CLASSTestYourAppENDCLASS_t,
        // Q_OBJECT / Q_GADGET
        QtPrivate::TypeAndForceComplete<TestYourApp, std::true_type>,
        // method 'init'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'cleanup'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'TestPushBack'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'TestPopBack'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'TestClear'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'TestDays'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'TestMonths'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'TestEdit'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'TestDec'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'TestInc'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'TestBegin'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'TestEnd'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'TestInsert'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'TestErase'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'TestIteratorInvalidation'
        QtPrivate::TypeAndForceComplete<void, std::false_type>
    >,
    nullptr
} };

void TestYourApp::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        auto *_t = static_cast<TestYourApp *>(_o);
        (void)_t;
        switch (_id) {
        case 0: _t->init(); break;
        case 1: _t->cleanup(); break;
        case 2: _t->TestPushBack(); break;
        case 3: _t->TestPopBack(); break;
        case 4: _t->TestClear(); break;
        case 5: _t->TestDays(); break;
        case 6: _t->TestMonths(); break;
        case 7: _t->TestEdit(); break;
        case 8: _t->TestDec(); break;
        case 9: _t->TestInc(); break;
        case 10: _t->TestBegin(); break;
        case 11: _t->TestEnd(); break;
        case 12: _t->TestInsert(); break;
        case 13: _t->TestErase(); break;
        case 14: _t->TestIteratorInvalidation(); break;
        default: ;
        }
    }
    (void)_a;
}

const QMetaObject *TestYourApp::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *TestYourApp::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_CLASSTestYourAppENDCLASS.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int TestYourApp::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 15)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 15;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 15)
            *reinterpret_cast<QMetaType *>(_a[0]) = QMetaType();
        _id -= 15;
    }
    return _id;
}
QT_WARNING_POP
